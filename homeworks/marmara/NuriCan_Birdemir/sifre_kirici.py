"""sifre_kirici.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RFSBZaJBRf0RrnlkQr6seIDyCWxfXnOC

Şifre Kırıcı Problemi
"""

def decrypt_message(encrypted_text):
    decrypted_text = ""

    for char in encrypted_text:
        if char.isalpha():
            shift = -5  # 5 harf geri kaydır
            if char.islower():
                decrypted_text += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                decrypted_text += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
        else:
            decrypted_text += char  # Noktalama işaretleri ve boşlukları koru

    return decrypted_text

# Şifreli mesajı çöz
encrypted_message = "ymj vznhp gwtbs ktc ozrux tajw ymj qfed itl"
original_message = decrypt_message(encrypted_message)

print("Orijinal Mesaj:", original_message)

"""Bonus1 - İngilizce Alfabe için Kullanıcının kendi mesajını şifreleyip geri açabileceği bir program"""

def encrypt_message(text):
    encrypted_text = ""
    temp_number = ""

    for char in text:
        if char.isalpha():
            shift = 5  # 5 harf ileri kaydır
            if char.islower():
                encrypted_text += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                encrypted_text += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
        elif char.isdigit():
            temp_number += char  # Sayıları biriktir
        else:
            if temp_number:
                encrypted_text += temp_number[::-1]  # Sayıyı ters çevir
                temp_number = ""  # Sayı hafızasını sıfırla
            encrypted_text += char  # Boşlukları ve noktalama işaretlerini koru

    if temp_number:
        encrypted_text += temp_number[::-1]  # Son sayıyı ekle

    return encrypted_text

def decrypt_message(text):
    decrypted_text = ""
    temp_number = ""

    for char in text:
        if char.isalpha():
            shift = -5  # 5 harf geri kaydır
            if char.islower():
                decrypted_text += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))
            else:
                decrypted_text += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))
        elif char.isdigit():
            temp_number += char  # Sayıları biriktir
        else:
            if temp_number:
                decrypted_text += temp_number[::-1]  # Sayıyı tekrar ters çevir
                temp_number = ""  # Sayı hafızasını sıfırla
            decrypted_text += char  # Boşlukları ve noktalama işaretlerini koru

    if temp_number:
        decrypted_text += temp_number[::-1]  # Son sayıyı ekle

    return decrypted_text

# Menü
while True:
    print("\n🔐 Şifreleme Programı")
    print("1- Metin Şifreleme Yap")
    print("2- Şifreli Metin Çözme")
    print("3- Çıkış")

    choice = input("Seçiminizi yapın (1/2/3): ")

    if choice == "1":
        message = input("\nŞifrelenecek metni girin: ")
        encrypted = encrypt_message(message)
        print("🔒 Şifrelenmiş Metin:", encrypted)

    elif choice == "2":
        encrypted_message = input("\nÇözülecek şifreli metni girin: ")
        decrypted = decrypt_message(encrypted_message)
        print("🔓 Çözülmüş Metin:", decrypted)

    elif choice == "3":
        print("Çıkış yapılıyor... 👋")
        break

    else:
        print("⚠ Geçersiz seçim! Lütfen 1, 2 veya 3 girin.")

"""Bonus2 - Türkçe Alfabe için Kullanıcının kendi mesajını şifreleyip geri açabileceği bir program"""

def encrypt_message(text):
    encrypted_text = ""
    temp_number = ""

    # Türkçe alfabe (büyük ve küçük harfler)
    tr_lower = "abcçdefgğhıijklmnoöprsştuüvyz"
    tr_upper = "ABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZ"

    for char in text:
        if char.lower() in tr_lower:
            shift = 5  # 5 harf ileri kaydır
            if char.islower():
                # Küçük harf işleme
                index = tr_lower.find(char)
                if index != -1:  # Eğer Türkçe alfabede varsa
                    new_index = (index + shift) % len(tr_lower)
                    encrypted_text += tr_lower[new_index]
                else:
                    encrypted_text += char  # Alfabe dışı karakteri olduğu gibi bırak
            else:
                # Büyük harf işleme
                index = tr_upper.find(char)
                if index != -1:  # Eğer Türkçe alfabede varsa
                    new_index = (index + shift) % len(tr_upper)
                    encrypted_text += tr_upper[new_index]
                else:
                    encrypted_text += char  # Alfabe dışı karakteri olduğu gibi bırak
        elif char.isdigit():
            temp_number += char
        else:
            if temp_number:
                encrypted_text += temp_number[::-1]  # Sayıyı ters çevir
                temp_number = ""
            encrypted_text += char  # Boşlukları ve noktalama işaretlerini koru

    if temp_number:
        encrypted_text += temp_number[::-1]

    return encrypted_text

def decrypt_message(text):
    decrypted_text = ""
    temp_number = ""

    # Türkçe alfabe (büyük ve küçük harfler)
    tr_lower = "abcçdefgğhıijklmnoöprsştuüvyz"
    tr_upper = "ABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZ"

    for char in text:
        if char.lower() in tr_lower:
            shift = -5  # 5 harf geri kaydır
            if char.islower():
                # Küçük harf işleme
                index = tr_lower.find(char)
                if index != -1:  # Eğer Türkçe alfabede varsa
                    new_index = (index + shift) % len(tr_lower)
                    decrypted_text += tr_lower[new_index]
                else:
                    decrypted_text += char  # Alfabe dışı karakteri olduğu gibi bırak
            else:
                # Büyük harf işleme
                index = tr_upper.find(char)
                if index != -1:  # Eğer Türkçe alfabede varsa
                    new_index = (index + shift) % len(tr_upper)
                    decrypted_text += tr_upper[new_index]
                else:
                    decrypted_text += char  # Alfabe dışı karakteri olduğu gibi bırak
        elif char.isdigit():
            temp_number += char  # Sayıları biriktir
        else:
            if temp_number:
                decrypted_text += temp_number[::-1]  # Sayıyı tekrar ters çevir
                temp_number = ""
            decrypted_text += char  # Boşlukları ve noktalama işaretlerini koru

    if temp_number:
        decrypted_text += temp_number[::-1]

    return decrypted_text

# Menü
while True:
    print("\n🔐 Şifreleme Programı")
    print("1- Metin Şifreleme Yap")
    print("2- Şifreli Metin Çözme")
    print("3- Çıkış")

    choice = input("Seçiminizi yapın (1/2/3): ")

    if choice == "1":
        message = input("\nŞifrelenecek metni girin: ")
        encrypted = encrypt_message(message)
        print("🔒 Şifrelenmiş Metin:", encrypted)

    elif choice == "2":
        encrypted_message = input("\nÇözülecek şifreli metni girin: ")
        decrypted = decrypt_message(encrypted_message)
        print("🔓 Çözülmüş Metin:", decrypted)

    elif choice == "3":
        print("Çıkış yapılıyor... 👋")
        break

    else:
        print("⚠ Geçersiz seçim! Lütfen 1, 2 veya 3 girin.")